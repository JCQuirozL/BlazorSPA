@page "/"
@using PoliciesBlazorApp.Models
@using PoliciesBlazorApp.EventsNMethods
@using PoliciesBlazorApp.Services

<PageTitle>Pólizas</PageTitle>

<Heading Size="HeadingSize.Is5" Class="top-air">Pólizas por cobrar</Heading>

@*LoadingIndicator wrapper, indicador de carga (spinner)*@
<LoadingIndicator @ref=LoadingIndicator FullScreen SpinnerColor="Color.Secondary">
    @*search fields, campos de búsqueda*@
    <Div Class="row">
        <Div Style="padding:2rem;" class="col-10">
            <Div Class="row">
                <Div class="col-3">
                    <TextEdit Class="col-12 background"
                              Placeholder="Número de póliza"
                              Color="Colores.AzulBBVA"
                              @bind-Text="@Events.PolicyFilter">
                    </TextEdit>
                </Div>
                <Div Class="col-7">
                    <Div Class="row">
                        <Div Class="col-1 from-to">
                            <Label Style="font-size: 1rem;">De:</Label>
                        </Div>
                        <Div Class="col-5">
                            <DatePicker Class="col-12 background"
                                        Placeholder="Fecha emisión inicio" @bind-Date="@Events.StartDateFilter">
                            </DatePicker>
                        </Div>
                        <Div Class="col-1 from-to">
                            <Label Style="font-size: 1rem;">A:</Label>
                        </Div>
                        <Div Class="col-5">
                            <DatePicker Class="col-12 background"
                                        Placeholder="Fecha emisión fin" @bind-Date="@Events.EndDateFilter">
                            </DatePicker>
                        </Div>
                    </Div>

                </Div>

                <Div Class="col-2">
                    <Select Class="col-12 background" TValue="int" @bind-SelectedValue="@Events.ValidatedFilter">
                        <SelectItem TValue="int" Value=1>Validada</SelectItem>
                        <SelectItem TValue="int" Value=2>Por validar</SelectItem>
                        <SelectItem TValue="int" Value=0>Todas</SelectItem>
                        <SelectItem TValue="int" Value=3>Vencidas</SelectItem>
                    </Select>

                </Div>
            </Div>
        </Div>
    </Div>


    @*Texto para guiar al usuario*@
    <Div Class="col-9">
        <Div Padding="Padding.Is3" Class="row">
            <Paragraph>A continuación se muestran las pólizas <strong>pendientes por validar.</strong></Paragraph>
        </Div>
    </Div>

    @*---------------------------------------------------------------Grid-----------------------------------------------------------*@
    <DataGrid TItem="Data"
              Data="@Service.PoliciesList.Data"
              @bind-SelectedRow="@SelectedItem"
              Sortable="false"
              Editable
              ShowPager
              PageSize=5
              Responsive="true"
              EditMode="DataGridEditMode.Popup"
              FixedHeader="true"
              Resizable
              Hoverable
              CommandMode="DataGridCommandMode.Commands"
              CustomFilter="@Events.OnCustomFilter"
              RowUpdated="@OnPolicyRowUpdated"
              UseInternalEditing=true
              DetailRowTrigger="@OnDetailRowShow"
              SelectedRowStyling="@Events.OnSelectedRowStyling"
              RowStyling="@Events.OnRowStyling" Style="margin-bottom: 0 !important;" UseValidation>
        <PopupTitleTemplate>
            <ModalTitle>
                Editar póliza
            </ModalTitle>
        </PopupTitleTemplate>
        <DataGridColumns>
            <DataGridColumn TItem="Data" Field="@nameof(Data.Policy)" Caption="PÓLIZA" Width="7%" TextAlignment="TextAlignment.Center" />
            <DataGridColumn CellClass="@((item)=>"breakin-word")" TItem="Data" Field="Leasing.Serial" Caption="NO. SERIE" Width="14%" TextAlignment="TextAlignment.Center" />
            <DataGridColumn TItem="Data" Field="Clipert.TotalPremium" Caption="PRIMA TOTAL" DisplayFormat="{0:C2}"
                            DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("en-US",false).NumberFormat" Width="7%" TextAlignment="TextAlignment.Center" />
            <DataGridColumn TItem="Data" Field="Leasing.PaymentFolio" Caption="FOLIO PAGO" Editable="true" Width="7%" TextAlignment="TextAlignment.Center" />
            <DataGridColumn TItem="Data" Field="Leasing.Bank" Caption="BANCO" Editable="true" Width="14%" TextAlignment="TextAlignment.Center" />
            <DataGridColumn TItem="Data" Field="Leasing.AccountNumber" Caption="CUENTA" Editable="true" Width="7%" TextAlignment="TextAlignment.Center" />
            <DataGridColumn TItem="Data" Field="Leasing.DocumentDate" Caption="FECHA DEPÓSITO" Editable="true" DisplayFormat="{0:dd/MM/yyyy}" Width="7%" TextAlignment="TextAlignment.Center" />
            <DataGridColumn TItem="Data" Field="Leasing.DepositAmount" Caption="IMPORTE" Editable="true" DisplayFormat="{0:C}"
                            DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("en-US",false).NumberFormat" Width="7%" TextAlignment="TextAlignment.Center" />
            <DataGridColumn TItem="Data" Field="Leasing.ReferenceId" Caption="REFERENCIA" Editable="true" Width="5%" TextAlignment="TextAlignment.Center" />
            <DataGridColumn TItem="Data" Field="Clipert.SendingDateASE" Caption="FECHA EMISIÓN" DisplayFormat="{0:dd/MM/yyyy}" Width="7%" TextAlignment="TextAlignment.Center" />

            <DataGridCheckColumn TItem="Data" Field="@nameof(Data.Validated)" Caption="VALIDADA" Width="5%">
                <DisplayTemplate>
                    <Div Class="centered">
                        @{
                            var date = context.Clipert.SendingDateASE;
                            var limitTerm = date.AddDays(Convert.ToDouble(context.Term));
                            TimeSpan term = limitTerm - DateTime.Now;

                            if (term.Days < 0)
                            {
                                <Check TValue="Boolean" Disabled
                               Background="Background.Secondary" />
                            }
                            else
                            {
                                <Check TValue="Boolean" Checked="@context.Validated" Disabled="@context.Validated" CheckedChanged="@OnCheckedChange"
                               Background="Background.Secondary" />
                            }
                        }
                    </Div>
                </DisplayTemplate>
            </DataGridCheckColumn>
            <DataGridColumn TextAlignment="TextAlignment.Center" TItem="Data" Width="5%">
                <DisplayTemplate>
                    <Tooltip Text="Mostrar/Añadir comentarios" Placement="TooltipPlacement.Top">
                        <Icon Name="IconName.Comments" IconStyle="IconStyle.DuoTone" IconSize="IconSize.x10" Clicked="@ShowCommentsModal"></Icon>
                    </Tooltip>
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridCommandColumn NewCommandAllowed="false" DeleteCommandAllowed="false">
                <SaveCommandTemplate>
                    <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary"
                            Clicked="@context.Clicked" Size="Size.ExtraLarge">
                        Guardar
                    </Button>
                </SaveCommandTemplate>
                <CancelCommandTemplate>
                    <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked" Size="Size.ExtraLarge">Cancelar</Button>
                </CancelCommandTemplate>
                <EditCommandTemplate>
                    @{
                        //Validación para checar la vigencia de la póliza
                        if (Methods.IsActivePolicy(context.Item))
                        {
                            <Tooltip Fade Text="Modificar datos de póliza" Placement="TooltipPlacement.Top">
                                <Button Style="min-width: 1rem !important; background-color: transparent !important; box-shadow: none !important;" Outline Clicked="context.Clicked" Disabled="context.Item.Validated">
                                    <Icon Name="IconName.Edit" IconStyle="IconStyle.DuoTone" IconSize="IconSize.ExtraSmall"></Icon>
                                </Button>
                            </Tooltip>
                        }
                        //var date = context.Item.Clipert.SendingDateASE;
                        //var limitTerm = date.AddDays(Convert.ToDouble(context.Item.Term));
                        //TimeSpan term = limitTerm - DateTime.Now;
                        //si aún está dentro del plazo (15,30,60 dás, etc) entonces que aún se muestre el botón de editar
                        //de lo contrario ya no se podrá validar información de la póliza
                        //if (term.Days < 0)
                        //{

                        //}
                        //else
                        //{
                        //    <Tooltip Fade Text="Modificar datos de póliza" Placement="TooltipPlacement.Top">
                        //        <Button Style="min-width: 1rem !important; background-color: transparent !important; box-shadow: none !important;" Outline Clicked="context.Clicked" Disabled="context.Item.Validated">
                        //            <Icon Name="IconName.Edit" IconStyle="IconStyle.DuoTone" IconSize="IconSize.ExtraSmall"></Icon>
                        //        </Button>
                        //    </Tooltip>
                        //}
                    }
                </EditCommandTemplate>
            </DataGridCommandColumn>



        </DataGridColumns>

        @*------------------------------------DetailRow Template ---------------------------------------------------------*@
        @*detalle de cada pólzia que se muestra al hacer clic sobre ella*@
        <DetailRowTemplate>
            @*<div class="container" style="background-color: #F1F1F1; margin:0 !important">*@
            <Div Class="row" Style="background-color: #F1F1F1;align-items: end !important;">
                <Div Class="col-1"></Div>
                <Div Class="col-3">
                    <Field Padding="Padding.Is1">
                        <FieldLabel TextWeight="TextWeight.Bold">Certificado: </FieldLabel>
                        <Text>@context.Clipert.Certificate</Text>
                    </Field>
                </Div>
                <Div Class="col-2">
                    <Field Padding="Padding.Is1">
                        <FieldLabel TextWeight="TextWeight.Bold">Factura: </FieldLabel>
                        <Text>@context.Clipert.Invoice</Text>
                    </Field>
                </Div>
                @*<Div Class="col-1"></Div>*@
                <Div Class="col-2">
                    <Field TextAlignment="TextAlignment.Center" Padding="Padding.Is1">
                        <FieldLabel TextWeight="TextWeight.Bold">Centro emisor: </FieldLabel>
                        <Text>@context.Clipert.EmmiterCenter</Text>
                    </Field>
                </Div>
                <Div Class="col-1"></Div>
                <Div Class="col-3">
                    <Field Padding="Padding.Is1">
                        <FieldLabel TextWeight="TextWeight.Bold">Última modificación: </FieldLabel>
                        @{
                            //Sino hay fecha de modificación entonces escribimos lo siguiente
                            if ((context.UpdateDate) == null)
                            {
                                <Text> Sin modificación</Text>
                            }

                            else
                            {
                                //Si ya hay fecha en que se haya modificado escribimos la última fecha de modificación
                                <Text> @context.UpdateDate</Text>
                            }

                        }
                    </Field>
                </Div>
            </Div>
            @*</div>*@
        </DetailRowTemplate>
    </DataGrid>


    @*--------------------------------------------------------->modal comments<----------------------------------------------*@
    @*modal que se muestra cuando se presiona el botón de ver/editar comentarios*@
    <Modal @ref="commentsModalRef" Animated AnimationDuration="550" FocusTrap="true" ShowBackdrop>
        <ModalContent Size="ModalSize.Large">
            <ModalHeader>
                <ModalTitle>Comentarios de la póliza @SelectedItem.Policy</ModalTitle>
                <CloseButton Clicked="@CloseCommentsModal" />
            </ModalHeader>
            <ModalBody>
                <DataGrid TItem="PolicyCommentVM"
                          Data="@SelectedItem.Comments.OrderByDescending(c=>c.CommentDate)"
                          ShowPager
                          PageSize="5"
                          Responsive
                          FixedHeader
                          Hoverable
                          Editable
                          CommandMode="DataGridCommandMode.ButtonRow"
                          EditMode="DataGridEditMode.Form"
                          @bind-SelectedRow="@selectedComment"
                          SelectedRowStyling="@Events.OnSelectedRowStylingComments"
                          RowStyling="@Events.OnRowStylingComments"
                          RowInserted="@OnCommentRowInserted"
                          UseValidation>
                    <DataGridColumns>

                        <DataGridColumn CellClass="@((item)=>"breakin-word")" TItem="PolicyCommentVM" Field="@nameof(PolicyCommentVM.Comment)" Caption="Comentario" Editable Width="35%">
                            <EditTemplate>
                                <MemoEdit ReplaceTab Placeholder="Ingresa el comentario aquí" Text="@((string)context.CellValue)" TextChanged="((value)=>context.CellValue = value)" />
                            </EditTemplate>
                        </DataGridColumn>
                        <DataGridColumn TItem="PolicyCommentVM" Field="@nameof(PolicyCommentVM.User)" Caption="Usuario" TextAlignment="TextAlignment.Center" />

                        <DataGridColumn TItem="PolicyCommentVM" Field="@nameof(PolicyCommentVM.CommentDate)" Caption="Fecha" TextAlignment="TextAlignment.Center" />
                        <DataGridColumn TItem="PolicyCommentVM" Field="@nameof(PolicyCommentVM.CommentType)" Caption="Tipo" Displayable="false" TextAlignment="TextAlignment.Center" />
                        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false">
                            <SaveCommandTemplate>
                                <Button Size="Size.ExtraLarge" ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">
                                    Guardar
                                </Button>
                            </SaveCommandTemplate>
                            <CancelCommandTemplate>
                                <Button Size="Size.ExtraLarge" ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">Cancelar</Button>
                            </CancelCommandTemplate>
                        </DataGridCommandColumn>
                    </DataGridColumns>
                    <ButtonRowTemplate>
                        <Button Size="Size.ExtraLarge" Color="Color.Primary" Disabled="@SelectedItem.Validated" Clicked="@context.NewCommand.Clicked">Nuevo</Button>
                        <Button Size="Size.ExtraLarge" Color="Color.Secondary" Clicked="@CloseCommentsModal">Cerrar</Button>
                    </ButtonRowTemplate>
                </DataGrid>
            </ModalBody>
        </ModalContent>
    </Modal>



    @*--------------------------------------------------------> Snackbar's <--------------------------------------------*@
    @*el snackbar es un toast*@
    @*success*@
    <Snackbar @ref="@successSnackBar" Color="SnackbarColor.Info">
        <Div Class="center-snack">
            <SnackbarBody Style="font-size: 15px; font-weight: 600;">
                Póliza @SelectedItem.Policy validada correctamente
                <SnackbarAction Clicked="@(()=>successSnackBar.Hide())"></SnackbarAction>
            </SnackbarBody>
        </Div>
    </Snackbar>
    <Snackbar @ref="@commentSnackBar" Color="SnackbarColor.Info">
        <Div Class="center-snack">
            <SnackbarBody Style="font-size: 15px; font-weight: 600;">
                Comentario guardado exitosamente
                <SnackbarAction Clicked="@(()=>commentSnackBar.Hide())"></SnackbarAction>
            </SnackbarBody>
        </Div>
    </Snackbar>
    @*error*@
    <Snackbar @ref="@errorSnackBar" Color="SnackbarColor.Danger">
        <Div Class="center-snack">
            <SnackbarBody Style="text-align: center; font-size: 15px; font-weight: 600;">
                Ocurrió un error guardando la información de la póliza: @SelectedItem.Policy
                <SnackbarAction Clicked="@(()=>errorSnackBar.Hide())"></SnackbarAction>
            </SnackbarBody>
        </Div>
    </Snackbar>
</LoadingIndicator>



@*CODEBEHIND*@
@code {

    #region Globales

    //Servicio para mandar un 'sweetalert'
    [Inject]
    IMessageService? MessageService { get; set; }

    //Spinner
    LoadingIndicator LoadingIndicator { get; set; } = new();

    //Toast
    Snackbar successSnackBar = new();
    Snackbar errorSnackBar = new();
    Snackbar commentSnackBar = new();

    //propiedad para saber en que elemento del DGrid estamos
    public Data SelectedItem = new();

    //propiedad para saber en que elemento del DGrid de comentarios estamos
    public PolicyCommentVM selectedComment = new();

    //Modal que contiene la grilla de comentarios
    private Modal commentsModalRef = new();

    #endregion

    //Evento que se lanza cuándo se carga la pag
    protected override async Task OnInitializedAsync() => await Service.LoadPoliciesAsync();

    //Evento para mostrar el detalle de cada row
    public Boolean OnDetailRowShow(DetailRowTriggerEventArgs<Data> e)
    {
        //con ésta propiedad indicamos que el detalle se cerrará al dar clic en la misma fila o en una diferente,
        //sólo un detalle abierto a la vez
        e.Single = true;
        return ((e.Item.Policy == SelectedItem?.Policy));
    }

    //Evento que se lanza al hacer clic en el CheckBox
    async Task OnCheckedChange(Boolean value)
    {
        //antes de 'validar' la info de las póliza, lanzamos un msg para que el usuario confirme la acción
        try
        {
            if (await MessageService.Confirm("Verificas que los datos son correctos. Hecha ésta acción ya no podrás modificar la información.", "Validación de póliza", opt => { opt.ConfirmButtonText = "Aceptar"; opt.CancelButtonText = "Cancelar"; opt.ShowMessageIcon = true; opt.MessageIcon = IconName.ExclamationCircle; }))
            {
                await ValidatePolicyInfo(value);
            }
        }
        catch (Exception ex)
        {

            throw;
        }


    }

    //mapeamos los datos de la póliza cuando se valida la info
    PatchPolicies[] MappedPolicy(Boolean validated)
    {
        Policy policy = new()
            {
                PolicyNumber = SelectedItem.Policy,
                Serial = SelectedItem.Leasing.Serial,
                PaymentFolio = SelectedItem.Leasing.PaymentFolio,
                ReferenceId = SelectedItem.Leasing.ReferenceId,
                Bank = SelectedItem.Leasing.Bank,
                Invoice = SelectedItem.Clipert.Invoice,
                AccountNumber = SelectedItem.Leasing.AccountNumber,
                DocumentDate = SelectedItem.Leasing.DocumentDate,
                DepositAmount = SelectedItem.Leasing.DepositAmount,
                Validated = validated
            };

        PatchPolicies[] model = new[] { new PatchPolicies(policy) };


        return model;
    }

    //Sobrecarga para mapear la póliza cuadno se edita info
    PatchPolicies[] MappedPolicy(Data policy)
    {
        Policy mappedPolicy = new()
            {
                PolicyNumber = policy.Policy,
                PaymentFolio = policy.Leasing.PaymentFolio,
                Serial = policy.Leasing.Serial,
                ReferenceId = policy.Leasing.ReferenceId,
                Bank = policy.Leasing.Bank,
                Invoice = policy.Clipert.Invoice,
                AccountNumber = policy.Leasing.AccountNumber,
                DocumentDate = policy.Leasing.DocumentDate,
                DepositAmount = policy.Leasing.DepositAmount,
                Validated = policy.Validated
            };

        PatchPolicies[] model = new[] { new PatchPolicies(mappedPolicy) };

        return model;
    }

    //mapeamos los comentarios al VM
    PolicyComment MappedComent(PolicyCommentVM comment)
    {
        //mapeamos el comentario que creamos
        PolicyComment commentPost = new();

        commentPost.Author.Name = "ejecutivo.bbva@bbva.com";
        commentPost.Author.Department = "TI";
        commentPost.Author.Id = SelectedItem.PolicyId;
        commentPost.Content = comment.Comment;

        return commentPost;
    }

    //Evento que se llama cuando se clickea el check de validar póliza
    async Task ValidatePolicyInfo(Boolean value)
    {
        try
        {

            //Lanzamos el spinner
            await LoadingIndicator.Show();

            //verificamos si se pudo actualizar correctamente datos de la póliza
            var policiesWereUpdated = await Service.PatchPoliciesAsync(MappedPolicy(value));

            if (policiesWereUpdated)
            {
                //if success
                await Service.LoadPoliciesAsync();
                await LoadingIndicator.Hide();
                await successSnackBar.Show();
                StateHasChanged();
            }
            else
            {
                //if it fails
                await LoadingIndicator.Hide();

                await errorSnackBar.Show();
            }


        }
        catch (Exception ex)
        {
            await LoadingIndicator.Hide();

            await errorSnackBar.Show();
            throw;
        }
    }

    //Evento que ocurre cuando insertamos el comentarios
    async Task OnCommentRowInserted(SavedRowItem<PolicyCommentVM, Dictionary<String, Object>> e)
    {
        //capturamos el comentario que hemos escrito
        var comment = e.Item;

        try
        {
            //Verificamos si pudimos invocar el método para hacer el post de comentarios
            await LoadingIndicator.Show();
            var commentWerePosted = await Service.PostCommentAsync(MappedComent(comment));

            if (commentWerePosted)
            {
                //if success
                await LoadingIndicator.Hide();
                await Service.LoadPoliciesAsync();
                await CloseCommentsModal();
                await commentSnackBar.Show();

                StateHasChanged();

            }
            else
            {
                ////sino...
                await LoadingIndicator.Hide();
                await errorSnackBar.Show();
            }
        }
        catch (Exception ex)
        {
            await LoadingIndicator.Hide();
            await errorSnackBar.Show();
        }
    }

    //Evento que se lanza al guardar la info de la póliza actualizada
    async Task OnPolicyRowUpdated(SavedRowItem<Data, Dictionary<String, object>> e)
    {
        //Capturamos la info que acabamos de ingresar
        var selectedPolicy = e.Item;


        try
        {
            //lanzamos el spinner y validamos si pudimos invocar la tarea para hacer el patch de policies
            await LoadingIndicator.Show();
            var policiesWereUpdated = await Service.PatchPoliciesAsync(MappedPolicy(selectedPolicy));

            //Si success
            if (policiesWereUpdated)
            {
                await Service.LoadPoliciesAsync();

                await LoadingIndicator.Hide();
                await successSnackBar.Show();
                StateHasChanged();
            }
            else
            {
                //sino
                await LoadingIndicator.Hide();
                await errorSnackBar.Show();
            }
        }
        catch (Exception ex)
        {
            await LoadingIndicator.Hide();
            await errorSnackBar.Show();
            throw;
        }
    }

    //Método para mostrar el modal comentarios
    private Task ShowCommentsModal()
    {
        return commentsModalRef.Show();
    }

    //Evento para ocultar el modal
    private Task CloseCommentsModal()
    {
        return commentsModalRef.Close(CloseReason.UserClosing);
    }

  }

