@page "/"
@using PoliciesBlazorApp.Models
@using System.Net.Http
@using PoliciesBlazorApp.Responses
@using System.Net.Http.Headers
@using System.Linq
@using System.Text

@inject HttpClient Http

<PageTitle>Pólizas</PageTitle>

<h5>Pólizas por cobrar</h5>

@*<DataGrid TItem="Data" Data="@PoliciesList.Data" Sortable="true" Editable="true" ShowPager="true" PageSize="3" Hoverable="true" Responsive
          EditMode="DataGridEditMode.Popup" FixedHeader="true" Resizable ResizeMode="TableResizeMode.Header">
    <DataGridColumn TItem="Data" Field="@nameof(Data.Policy)" Caption="Póliza" />
    <DataGridColumn TItem="Data" Field="Clipert.TotalPremium" Caption="Prima Total" DisplayFormat="{0:C}"
                    DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("mx-MX")" />
    <DataGridColumn TItem="Data" Field="Leasing.PaymentFolio" Caption="Folio Pago" Editable="true" />
    <DataGridColumn TItem="Data" Field="Leasing.Bank" Caption="Banco" Editable="true" Width="200px" />
    <DataGridColumn TItem="Data" Field="Leasing.AccountNumber" Caption="No. Cuenta" Editable="true" />
    <DataGridColumn TItem="Data" Field="Leasing.DocumentDate" Caption="Fecha Depósito" Editable="true" />
    <DataGridColumn TItem="Data" Field="Leasing.DepositAmount" Caption="Importe Depositado" Editable="true" DisplayFormat="{0:C}"
                    DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("mx-MX")" />
    <DataGridColumn TItem="Data" Field="Leasing.ReferenceId" Caption="Referencia" Editable="true" />
    <DataGridColumn TItem="Data" Field="Clipert.Certificate" Caption="No. Cert." Displayable="false" />
    <DataGridColumn TItem="Data" Field="Clipert.Invoice" Caption="No. Fact." />
    <DataGridColumn TItem="Data" Field="Clipert.SendingDateASE" Caption="Fecha Emisión" />
    <DataGridColumn TItem="Data" Field="Clipert.EmmiterCenter" Caption="Centro Emisor" Displayable="false" />
    <DataGridCheckColumn TItem="Data" Field="@nameof(Data.Validated)" Caption="Validada" Editable="true">
        <DisplayTemplate>
            <Check TValue="Boolean" Checked="context.Validated" Disabled="true" />
        </DisplayTemplate>
    </DataGridCheckColumn>
    <DataGridColumn TItem="Data" Caption="Comentarios">
        <DisplayTemplate>
            <Button Color="Color.Default" Width="Width.Auto">Ver</Button>
        </DisplayTemplate>
    </DataGridColumn>
    <DataGridCommandColumn TItem="Data" DeleteCommandAllowed=false>
        <NewCommandTemplate>
            <TableRowHeader>Acciones</TableRowHeader>
        </NewCommandTemplate>
        <EditCommandTemplate>
            <Button Color="Color.Secondary" Clicked="@context.Clicked">Editar</Button>
            <div style="padding:3px;"></div>
            <Button Color="Color.Primary" Clicked="@context.Clicked">Detalle</Button>
        </EditCommandTemplate>
    </DataGridCommandColumn>

</DataGrid>*@

<div class="container">
    <div class="row">
        <div class="col-3">
            Póliza: <TextEdit @bind-Text="@policyFilter"></TextEdit>
        </div>
        <div class="col-3">
            Fecha inicio: <DatePicker @bind-Date="@startDateFilter"></DatePicker>
        </div>
        <div class="col-3">
            Fecha fin: <DatePicker @bind-Date="@endDateFilter"></DatePicker>
        </div>
        <div class="col-3">
            Validada:
            <Select TValue="bool?" @bind-SelectedValue="@validatedFilter">
                <SelectItem TValue="bool?" Value="true">Sí</SelectItem>
                <SelectItem TValue="bool?" Value="false">No</SelectItem>
                <SelectItem TValue="bool?" Value="(bool?)null">Todas</SelectItem>
            </Select>

        </div>
    </div>
</div>

<DataGrid TItem="Data"
          Data="@PoliciesList.Data"
          @bind-SelectedRow="@selectedItem"
          Editable
          ShowPager
          Responsive="true"
          EditMode="DataGridEditMode.Popup"
          PopupTitleTemplate="@Title"
          FixedHeader="true"
          Resizable
          Hoverable
          CommandMode="DataGridCommandMode.ButtonRow"
          CustomFilter="@OnCustomFilter"
          RowUpdated="@OnRowUpdated"
          UseInternalEditing=true>
    <ButtonRowTemplate>
        <Button Color="Color.Primary" Disabled="(selectedItem is null)" Clicked="context.EditCommand.Clicked">Editar</Button>
        <Button Color="Color.Secondary" Disabled="(selectedItem is null)" Clicked="@ShowDetailsModal">Detalle</Button>
    </ButtonRowTemplate>
    <DataGridColumns>
        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false">
            <SaveCommandTemplate>
                <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary"
                        Clicked="@context.Clicked">
                    Guardar
                </Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">Cancelar</Button>
            </CancelCommandTemplate>
        </DataGridCommandColumn>
        <DataGridColumn TItem="Data" Field="@nameof(Data.Policy)" Caption="Póliza" />
        <DataGridColumn TItem="Data" Field="Clipert.TotalPremium" Caption="Prima Total" DisplayFormat="{0:C}"
                        DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("mx-MX")" />
        <DataGridColumn TItem="Data" Field="Leasing.PaymentFolio" Caption="Folio Pago" Editable="true" />
        <DataGridColumn TItem="Data" Field="Leasing.Bank" Caption="Banco" Editable="true" Width="200px" />
        <DataGridColumn TItem="Data" Field="Leasing.AccountNumber" Caption="No. Cuenta" Editable="true" />
        <DataGridColumn TItem="Data" Field="Leasing.DocumentDate" Caption="Fecha Depósito" Editable="true" />
        <DataGridColumn TItem="Data" Field="Leasing.DepositAmount" Caption="Importe Depositado" Editable="true" DisplayFormat="{0:C}"
                        DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("mx-MX")" />
        <DataGridColumn TItem="Data" Field="Leasing.ReferenceId" Caption="Referencia" Editable="true" />
        <DataGridColumn TItem="Data" Field="Clipert.Certificate" Caption="No. Cert." Displayable="false" />
        <DataGridColumn TItem="Data" Field="Clipert.Invoice" Caption="No. Fact." />
        <DataGridColumn TItem="Data" Field="Clipert.SendingDateASE" Caption="Fecha Emisión" />
        <DataGridColumn TItem="Data" Field="Clipert.EmmiterCenter" Caption="Centro Emisor" Displayable="false" />
        <DataGridCheckColumn TItem="Data" Field="@nameof(Data.Validated)" Caption="Validada" Editable="true">
            <DisplayTemplate>
                <Check TValue="Boolean" Checked="context.Validated" Disabled="true" />
            </DisplayTemplate>
        </DataGridCheckColumn>
        <DataGridColumn TItem="Data" Caption="Comentarios">
            <DisplayTemplate>
                <Button Color="Color.Info" Width="Width.Auto" Clicked="@ShowCommentsModal">Ver</Button>
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

<Modal @ref="commentsModalRef">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Comentarios</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <DataGrid TItem="PolicyCommentVM" Data="@selectedItem.Comments" ShowPager Responsive FixedHeader Hoverable Editable
                      CommandMode="DataGridCommandMode.ButtonRow" EditMode="DataGridEditMode.Form" @bind-SelectedRow="@selectedComment">
                <DataGridColumns>
                    <DataGridColumn TItem="PolicyCommentVM" Field="@nameof(PolicyCommentVM.Comment)" Caption="Comentario" Editable />
                    <DataGridColumn TItem="PolicyCommentVM" Field="@nameof(PolicyCommentVM.User)" Caption="Usuario" />
                    <DataGridColumn TItem="PolicyCommentVM" Field="@nameof(PolicyCommentVM.CommentDate)" Caption="Fecha" />
                    <DataGridColumn TItem="PolicyCommentVM" Field="@nameof(PolicyCommentVM.CommentType)" Caption="Tipo" />
                    <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false">
                        <SaveCommandTemplate>
                            <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">Guardar</Button>
                        </SaveCommandTemplate>
                        <CancelCommandTemplate>
                            <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">Cancelar</Button>
                        </CancelCommandTemplate>
                    </DataGridCommandColumn>
                </DataGridColumns>
                <ButtonRowTemplate>
                    <Button Color="Color.Success" Disabled="(selectedComment is null)" Clicked="context.NewCommand.Clicked">Nuevo</Button>
                    @*<Button Color="Color.Primary" Clicked="context.EditCommand.Clicked">Editar</Button>*@
                </ButtonRowTemplate>
            </DataGrid>
        </ModalBody>
    </ModalContent>
</Modal>

<Modal @ref="detailsModalRef">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle Style="text-align:center">Detalle de la póliza @selectedItem.Policy</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field Padding="Padding.Is2">
                <FieldLabel Style="font-size:1rem;" TextWeight="TextWeight.Bold">Prima Total: </FieldLabel>
                <Text TextColor="TextColor.Secondary">@selectedItem.Clipert.TotalPremium</Text>
            </Field>
            <Field Padding="Padding.Is2">
                <FieldLabel Style="font-size:1rem;" TextWeight="TextWeight.Bold">Folio de pago: </FieldLabel>
                <Text TextColor="TextColor.Secondary">@selectedItem.Leasing.PaymentFolio</Text>
            </Field>
            <Field Padding="Padding.Is2">
                <FieldLabel Style="font-size:1rem;" TextWeight="TextWeight.Bold">Banco: </FieldLabel>
                <Text TextColor="TextColor.Secondary">@selectedItem.Leasing.Bank</Text>
            </Field>
            <Field Padding="Padding.Is2">
                <FieldLabel Style="font-size:1rem;" TextWeight="TextWeight.Bold">Número de cuenta: </FieldLabel>
                <Text TextColor="TextColor.Secondary">@selectedItem.Leasing.AccountNumber</Text>
            </Field>
            <Field Padding="Padding.Is2">
                <FieldLabel Style="font-size:1rem;" TextWeight="TextWeight.Bold">Fecha de depósito: </FieldLabel>
                <Text TextColor="TextColor.Secondary">@selectedItem.Leasing.DocumentDate</Text>
            </Field>
            <Field Padding="Padding.Is2">
                <FieldLabel Style="font-size:1rem;" TextWeight="TextWeight.Bold">Importe depositado: </FieldLabel>
                <Text TextColor="TextColor.Secondary">@selectedItem.Leasing.DepositAmount</Text>
            </Field>
            <Field Padding="Padding.Is2">
                <FieldLabel Style="font-size:1rem;" TextWeight="TextWeight.Bold">Referencia: </FieldLabel>
                <Text TextColor="TextColor.Secondary">@selectedItem.Leasing.ReferenceId</Text>
            </Field>
            <Field Padding="Padding.Is2">
                <FieldLabel Style="font-size:1rem;" TextWeight="TextWeight.Bold">Certificado: </FieldLabel>
                <Text TextColor="TextColor.Secondary">@selectedItem.Clipert.Certificate</Text>
            </Field>
            <Field Padding="Padding.Is2">
                <FieldLabel Style="font-size:1rem;" TextWeight="TextWeight.Bold">Factura: </FieldLabel>
                <Text TextColor="TextColor.Secondary">@selectedItem.Clipert.Invoice</Text>
            </Field>
            <Field Padding="Padding.Is2">
                <FieldLabel Style="font-size:1rem;" TextWeight="TextWeight.Bold">Fecha de emisión: </FieldLabel>
                <Text TextColor="TextColor.Secondary">@selectedItem.Clipert.SendingDateASE</Text>
            </Field>
            <Field Padding="Padding.Is2">
                <FieldLabel Style="font-size:1rem;" TextWeight="TextWeight.Bold">Centro emisor: </FieldLabel>
                <Text TextColor="TextColor.Secondary">@selectedItem.Clipert.EmmiterCenter</Text>
            </Field>
        </ModalBody>
    </ModalContent>
</Modal>
@code {

    public RenderFragment<PopupTitleContext<Data>> Title { get; set; }


    public Data selectedItem = new Data();
    public PolicyCommentVM selectedComment = new PolicyCommentVM();

    public string Url = "/insurance/v1/policies";
    public string Url2 = "/api/PoliciesCollection";

    public BillingData PoliciesList = new();
    private Modal commentsModalRef = new();
    private Modal detailsModalRef = new();

    private string? policyFilter;
    private DateTime? startDateFilter = null;
    private DateTime? endDateFilter = null;
    private bool? validatedFilter = null;


    private bool OnCustomFilter(Data model)
    {
        // We want to accept empty value as valid or otherwise
        // datagrid will not show anything.
        //if ((string.IsNullOrEmpty(policyFilter)) || (startDateFilter == null) || (endDateFilter == null) || (validatedFilter.Equals(null)))
        //return true;

        //All params
        if ((startDateFilter != null) && (endDateFilter != null) && (policyFilter != null) && (validatedFilter != null))
        {
            return model.Policy.Contains(policyFilter, StringComparison.OrdinalIgnoreCase) &&
        (model.Clipert.SendingDateASE >= startDateFilter && model.Clipert.SendingDateASE <= endDateFilter) &&
        (model.Validated.Equals(validatedFilter)) == true;
        }

        //With emission date and Policy number
        if ((startDateFilter != null) && (endDateFilter != null) && (policyFilter != null))
        {
            return model.Policy.Contains(policyFilter, StringComparison.OrdinalIgnoreCase) &&
        (model.Clipert.SendingDateASE >= startDateFilter && model.Clipert.SendingDateASE <= endDateFilter) == true;
        }

        //Policy and validation
        if (validatedFilter != null && policyFilter != null)
        {
            return model.Policy.Contains(policyFilter, StringComparison.OrdinalIgnoreCase) &&
            (model.Validated.Equals(validatedFilter)) == true;
        }

        //Date
        if ((startDateFilter != null) && (endDateFilter != null))
        {
            return (model.Clipert.SendingDateASE >= startDateFilter && model.Clipert.SendingDateASE <= endDateFilter) == true;
        }

        //Policy number
        if (policyFilter != null)
        {
            return model.Policy.Contains(policyFilter, StringComparison.OrdinalIgnoreCase);
        }

        //validation status
        if (validatedFilter != null)
        {
            return model.Validated.Equals(validatedFilter) == true;
        }

        if (validatedFilter == null)
        {
            return true;
        }

        return true;


    }

    protected override async Task OnInitializedAsync() => await LoadPoliciesAsync();

    async Task OnRowUpdated(SavedRowItem<Data, Dictionary<string, object>> e)
    {
        var policies = e.Item;
        Policy p = new()
            {
                PolicyNumber = policies.Policy,
                PaymentFolio = policies.Leasing.PaymentFolio,
                ReferenceId = policies.Leasing.ReferenceId,
                Bank = policies.Leasing.Bank,
                Invoice = policies.Clipert.Invoice,
                AccountNumber = policies.Leasing.AccountNumber,
                DocumentDate = policies.Leasing.DocumentDate,
                DepositAmount = policies.Leasing.DepositAmount,
                Validated = policies.Validated
            };
        try
        {
            PatchPolicies[] model = new[] { new PatchPolicies(p) };

            var json = JsonConvert.SerializeObject(model);
            var body = new StringContent(json, Encoding.UTF8, "application/json");

            var request = new HttpRequestMessage(HttpMethod.Patch, Url);

            request.Headers.Add("Session-Id", "10000057cpbas096");
            request.Content = body;

            using var httpResponse = await Http.SendAsync(request);

            await LoadPoliciesAsync();

            StateHasChanged();

        }
        catch (Exception)
        {

            throw;
        }
    }

    async Task LoadPoliciesAsync()
    {

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, Url);
            request.Headers.Add("Session-Id", "10000057cpbas096");
            using var httpResponse = await Http.SendAsync(request);

            PoliciesList = await httpResponse.Content.ReadFromJsonAsync<BillingData>
    ();
            //PoliciesList = await Http.GetFromJsonAsync<List<BillingData>>(Url);
        }
        catch (Exception)
        {

            throw;
        }

    }

    //async Task PatchPoliciesAsync()
    //{

    //    try
    //    {

    //        PatchPolicies model = new();
    //        model.Policy.PolicyNumber = selectedItem.Policy;
    //        model.Policy.PaymentFolio = selectedItem.Leasing.PaymentFolio;
    //        model.Policy.ReferenceId = selectedItem.Leasing.ReferenceId;
    //        model.Policy.Bank = selectedItem.Leasing.Bank;
    //        model.Policy.Invoice = selectedItem.Clipert.Invoice;
    //        model.Policy.AccountNumber = selectedItem.Leasing.AccountNumber;
    //        model.Policy.DocumentDate = selectedItem.Leasing.DocumentDate;
    //        model.Policy.DepositAmount = selectedItem.Leasing.DepositAmount;
    //        model.Policy.Validated = selectedItem.Validated;

    //        var json = JsonConvert.SerializeObject(model);
    //        var body = new StringContent(json, Encoding.UTF8, "application/json");

    //        var request = new HttpRequestMessage(HttpMethod.Patch, Url);

    //        request.Headers.Add("Session-Id", "10000057cpbas096");
    //        request.Content = body;

    //        using var httpResponse = await Http.SendAsync(request);


    //    }
    //    catch (Exception)
    //    {

    //        throw;
    //    }
    //}

    private Task ShowCommentsModal()
    {
        //LoadComments(selectedItem.Policy, selectedItem.Clipert.Invoice).Wait();
        return commentsModalRef.Show();
    }

    private Task ShowDetailsModal()
    {
        //LoadComments(selectedItem.Policy, selectedItem.Clipert.Invoice).Wait();
        return detailsModalRef.Show();
    }
}
